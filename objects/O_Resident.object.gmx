<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_person_body_fm_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Person</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
decided=false;
time_decided=0;
current_station=noone;
mybed = noone;
stay_time=0;

hunger=0;
bladder=0;
tiredness=0;

sadtolerance = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create random person
//randomize_person(choose(true, false));
happiness=irandom_range(50,90);
mybed = noone;
gender = choose(true, false);
//randomize name
name = randomize_name(gender);
//random person
randomize_person(gender);
likes = likes_randomize();
voice = random_character_voice(O_Resident, gender);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(mybed)){
    mybed.myperson = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///happy clamp

happiness = clamp(happiness,0,100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///urges tick up, and happiness decreases if any are too high

    //deltafy(1) is one per second,
    //aiming for needing the toilet at least once per day, the base
    //rate will reach 100 in 75% of the time it takes for a 3 minute day to pass
    
//people are meant to get hungry about 3 times a day
if(ctrl.isDay){
    bladder+=deltafy(4/(30));
    hunger+=deltafy(7/(30*60*0.3));
    
    
    if(!(bladder&lt;90))
    {
        happiness-=deltafy(2/30)
        //initiate looking for toile
    }
    
    if(!(hunger&lt;90))
    {
        happiness-=deltafy(1.5/30);                    
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///choose what to do if not decided

//these consecutive ifs deal with urges and are essentially the
//same

if(80&lt;hunger)
{
    var chosenstation=noone;
    var listsize = ds_list_size(global.built_stations);
    
    for(var i =0; i &lt; listsize; i++)
    {
        if(global.built_stations[|i].satisfies=="hunger")
            if(irandom(100)&lt;hunger)
                chosenstation=global.built_stations[|i];
                
        
        if(chosenstation!=noone)
            break;
    }
    
    if(chosenstation==noone)
        for(var i =0; i &lt; listsize; i++)
        {
            if(global.built_stations[|i].satisfies=="hunger")
            {
                chosenstation=global.built_stations[|i];
                break;
            }
         
        }
    decided=true;    
}

if(80&lt;bladder)
{
    var chosenstation=noone;
    var listsize = ds_list_size(global.built_stations);
    
    for(var i =0; i &lt; listsize; i++)
    {
        if(global.built_stations[|i].satisfies=="bladder")
            if(irandom(100)&lt;hunger)
                chosenstation=global.built_stations[|i];
                
        
        if(chosenstation!=noone)
            break;
    }
    
    if(chosenstation==noone)
        for(var i =0; i &lt; listsize; i++)
        {
            if(global.built_stations[|i].satisfies=="bladder")
            {
                chosenstation=global.built_stations[|i];
                break;
            }
         
        }
    decided=true;
}

if(!decided &amp;&amp; ctrl.isDay)
{
    var choice=irandom(100);
    if(-1 &lt; choice &amp;&amp; choice &lt; 30)
    {
        //30% chance of choosing a random spot
        target_x=irandom(room_width);
        target_y=irandom(room_height);
        
        while(! inside_house(target_x,target_y))
        {
            target_x=irandom(room_width);
            target_y=irandom(room_height);
        }
        decided=true;
    }
    else if( 29 &lt; choice &amp;&amp; choice &lt; 60)
    {
        //30% chance of choosing a random station to visit
        //use proportional "roulette style" selection
        var listsize = ds_list_size(global.built_stations);
        var weightsum=0;
        for(var i =0; i &lt; listsize; i++)
        {
            weigtsum=weightsum+global.built_stations[|i].visitweight;
        }
        choosepoint=random(weightsum);
        var chosenstation = noone;
        for(var i=0;i&lt;listsize;i++)
        {
            chosenstation=global.built_stations[|i];
            weightsum=weightsum-global.built_stations[|i].visitweight;
            if(weightsum &lt;= choosepoint)
            {
                break;
            }               
        }
        if(chosenstation != noone){
            //moving to station doesn't work currently.
            //walking one short of the target
            //SOS!! this code is as yet untested
            
            tilepath=Astar(x div 31,y div 31,chosenstation.x div 31,chosenstation.y div 31,chosenstation);
              
        }
        current_station=chosenstation;
        decided=true;      
    }
    if(59&lt;choice&lt;90)
    {
        var chosenstation=noone;
        var listsize = ds_list_size(global.built_stations);
        for(var i =0; i &lt; listsize; i++)
        {
            if(global.built_stations[|i].satisfies=="hunger")
                if(irandom(100)&lt;hunger)
                    chosenstation=global.built_stations[|i];
                    
            if(global.built_stations[|i].satisfies=="bladder")
                if(irandom(100)&lt;bladder)
                    chosenstation=global.built_stations[|i];
            
            if(chosenstation!=noone)
                break;
        }
        if(chosenstation!=noone)
        {
            target_x=chosenstation.x;
            target_y=chosenstation.y;  
        
            current_station=chosenstation;
            decided=true;
        }         
    }
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///choose whether or not to abandon decided course
//if stay time is positive, resident has not been in station
//for the minimum duration.
if(0&lt;stay_time)
    exit;
if(decided &amp;&amp; ctrl.isDay)
{
    time_decided=time_decided+deltafy(1);
    if((target_x==x &amp;&amp; target_y==y)|| (current_station != noone&amp;&amp;!current_station.isrunning)) 
    {
        decided=false;
        time_decided=0;
    }
    
    if(time_decided &lt; deltafy(600))
    {
        var leaving_probability=(time_decided-deltafy(60))/deltafy(1800)
        if(random(1) &lt; leaving_probability)
        {
            decided=false;
            time_decided=0;
        }
               
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///I HAZ BED
if(!ctrl.isDay){
    if(instance_exists(mybed)){
        x = mybed.x;
        y = mybed.y;
    }
    else{
        for(var i = 0; i &lt; instance_number(o_bed); i++){
            var I = instance_find(o_bed,i);
            if(I.myperson == noone){
                mybed = I;
                I.myperson = id;
                break;
            }
        }
        if(mybed == noone){
            happiness = 5;
        }
    }
}
/*
else{
    if((ctrl.matrix[x div 31,y div 31]) == mybed){
       while(ctrl.matrix[x div 31,y div 31] != noone){
            x += 31;
       }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Voice
var n;
audio_play_sound(soundbyte_random(voice), 1, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_person(x, y, id);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
