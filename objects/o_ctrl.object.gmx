<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_maple_leaf,1,true);
hp = global.hpdiff;
background_hspeed[0] = -0.1 * scr_delta();
I=7;
state = 0;
nextstate = 0;
count = 0;
timer = 0;
timescore = 0;
enemyscore = 0;
bossscore = 0;
global.winflag = false;
randomize();
score = 0;
alarm[0] = 30/scr_realdelta()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room != rm_game){
    instance_destroy();
}
if(scr_totalscore() &gt;= 5*scr_bonus()){
    timescore += 5;
}

alarm[0] = 30/scr_delta()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FSM
if(room != rm_game){
    instance_destroy();
    exit;
}
count += scr_delta();
if(timer&gt;205 &amp;&amp; timer &lt;= 215){
    if(!instance_exists(o_santa)){
        with(o_deer){
            instance_destroy();
        }
        state = 1;
        timer = 180.1
    }
}
switch(state){
    case 0:{
        scr_wave(state);
        state = 1;
        nextstate = 2;
        break;
    }
    case 1:{
        if(!instance_exists(o_deer)){
            if(timer &gt;= 180){
                if(timer &gt;= 195.8){
                    state = 17;
                    o_ctrl.hp += global.bhpdiff;
                    instance_create(800,320,o_santa);
                }
                break;
            }
            else{
                state = nextstate;     
            }  
        }
        break;
    }
    case 2:{
        scr_wave(state);
        state = 1;
        I = 10;
        nextstate = 3;
        break;
    }
    case 3:{
        scr_wave(state);
        if(I &lt; 0){
            state = 1;
            nextstate = 4;
            I = 5;
        }
        break;
    }
    case 4:{
        if(I = 5){
            scr_wave(0);
        }
        scr_wave(3);
        if(I &lt; 0){
            state = 1;
            nextstate = 5;
            I = 0;
        }
        break;
    }
    case 5:{
        if(!instance_exists(o_explogift)){
            if(I &lt; 1){
                scr_wave(5);  
                I = 120*scr_delta();  
            }
            else{
                I--;
                if(I == 1){
                    state = 1;
                    nextstate = 6;
                }
            }
        }
        break;
    }
    case 6:{
        scr_wave(0);
        scr_wave(5);
        state = 1;
        nextstate = 7;
    }
    case 7:{
        scr_wave(7);
        state = 1;
        nextstate = 8;
        break;
    }
    case 8:{
        scr_wave(0)
        scr_wave(8);
        state = 1;
        nextstate = 9;
        I = 7;
        break;
    }
    case 9:{
        scr_wave(3);
        if(I == 5){
            scr_wave(8);
            I--;
        }
        if(!I){
            state = 1;
            nextstate = 10;
        }
        break;
    }
    case 10:{
        scr_wave(5);
        scr_wave(8);
        scr_wave(2);
        I = 7;
        nextstate = 11;
        state = 1;
        break;
    }
    case 11:{
        if(I == 7){
            scr_wave(2);
        }
        if(I &amp;&amp; count &gt; 2){
            I--;
            count = 0;
            scr_wave(8);
        }
        else{
            if(!I){
                state = 1;
                nextstate = 12;
            }
        }
        break;
    }
    case 12:{
        scr_wave(2);
        state = 1;
        nextstate = 13;
        break;
    }
    case 13:{
        repeat(5){
            scr_wave(irandom(13));
        }
        state = 1;
        nextstate = 14;
    }
    case 14:{
        scr_wave(3);
        scr_wave(7);
        state = 1;
        nextstate = 15;
        break;
    }
    case 15:{
        scr_wave(7);
        scr_wave(8);
        state = 1;
        nextstate = 16;
    }
    case 16:{
        scr_wave(5);
        scr_wave(8);
        scr_wave(7);
        state = 1;
        nextstate = choose(0,6);
        I = 10;
        break;
    }
    case 17:{
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Star spawn

if(!irandom(250 / room_speed)){
    instance_create(irandom(room_width),irandom(room_height),o_star);
}

if(!irandom(1000 / room_speed)){
    if(!instance_exists(o_moon)){
        instance_create(room_width + 200,128,o_moon);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer += scr_realdelta()/30;

if(hp &lt;= 0){
    room_goto(rm_basic);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room != rm_game){
    instance_destroy();
    exit;
}
draw_set_color(c_white);
/*
draw_text(0,64,fps);
draw_text(0,96,fps_real);
*/
var str = "Santa incoming in : "
draw_text(240,16,str +  + string(max(0,180-timer)));

for(var i = 0; i &lt; 6; i++){
    draw_text(304 + string_width(str) +16*(6-i),16,string_format(frac(floor(scr_totalscore() / power(10,i))/10)*10,0,0));
}

draw_set_color(c_black);
for(i = 0; i &lt; min(10,hp); i++){
    draw_sprite(spr_icons,0,32 + 24*i,48);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_question("Unprofessionally Paused!#Would you like to go to the main menu?#(Your progress is not saved")){
    instance_destroy();
    room_goto(rm_basic);
}
else{
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
