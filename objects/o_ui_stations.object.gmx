<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create UI, is different between day and night
selected = noone;
alarm[0] = 3*(30/fps);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///There is only one ui at a time

with(o_ui_stations){
    if(id != other.id &amp;&amp; !ctrl.isClicked){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI for Stations
var xx,yy,offset,yoffset;
var name, desc, level, happyMod, moneyMod, capacity,orderlies,prefix;
offset = 32;
yoffset = string_height("Lol") + 4;
xmove_offset = string_width("Move");
xsell_offset = string_width("Sell");
desc = ctrl.store[#1,2];
if(selected != noone){
    ctrl.isClicked = true; 
    if(!ctrl.isDay){
        xx = x;
        yy = y;
        if(!alarm[0]){  
            //if xx, yy, offset, yoffset or any constants are changed,
            //you need to change it to the same in Draw event.
            // the last constant in each line is the end of the sprite
            if(mouse_check_button_pressed(mb_left)){
                //Move bed
                if(mouse_x &gt; xx+offset  &amp;&amp; mouse_x &lt; xx + xmove_offset + 40){
                    if(mouse_y &gt; yy + (6* yoffset) &amp;&amp; mouse_y &lt; yy + (6 * yoffset) + 20){
                        ctrl.profileActive = false;
                        //Remove old position from matrix
                        matrix_clear(xx div 31, yy div 31, selected.width, selected.height, selected.id);
                        selected.move_bed = true;
                        selected.being_built = true;
                        with(object_index){
                            instance_destroy();
                        }
                    } 
                }
                //Sell bed
                if(mouse_x &gt; xx + string_width(desc) + offset - xsell_offset &amp;&amp; mouse_x &lt; xx + string_width(desc) + offset){
                    if(mouse_y &gt; yy + (6 * yoffset) &amp;&amp; mouse_y &lt; yy + (6 * yoffset) + 20){
                        ctrl.funds += ctrl.store[#store_get_id(ctrl.store, selected.object_index), 4]/2; //update funds to price of station/2
                        matrix_clear(xx div 31, yy div 31, selected.width, selected.height, selected.id);
                        instance_destroy();
                        with(selected){
                            instance_destroy();
                        }
                        ctrl.profileActive = false;
                    }  
                }
                
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI for stations when clicked
//draw_text(0,0,"This is working");

var xx,yy,offset,yoffset, xmove_offset, xsell_offset;
var name, desc, level, happyMod, moneyMod, capacity,orderlies,prefix, sell;
var sell = false;
var move = false;
offset = 32;
yoffset = string_height("Lol") + 4;
xmove_offset = string_width("Move");
xsell_offset = string_width("Sell");

//UI for clicking a station, it has name, description, level (might not apply), happiness, price(when selling) depth and two buttons (sell and move)

if(selected != noone ){ 
    xx = selected.x
    yy = selected.y;
    name = selected.type;
    depth = -100; 
    //ctrl.profileActive = true; //I don't think this is being used
    
    if(name == "Bed"){
        desc = ctrl.store[#2,2];
        //Fix later, we want to refer to the station itself
        level = 1; 
        orderlies = 0;
        capacity = 1;
        happyMod = 1;
        moneyMod = 0;
        sell = ctrl.store[#2,4]/2;
    }
    else if(name == "bingo"){
        desc = ctrl.store[#1,2];
        //Insert happiness add on
        //Fix later, we want to refer to the station itself
        level = 1; 
        orderlies = 1;
        capacity = 4;
        happyMod = 1;
        moneyMod = -10;
        sell = ctrl.store[#1,4]/2;
    }
    else if(name == "TV"){
        desc = ctrl.store[#3,2];
        //Fix later, we want to refer to the station itself
        level = 1;
        orderlies = 1;
        capacity = 4;
        happyMod = 1;
        moneyMod = -1;
        sell = ctrl.store[#3,4]/2;
    } 
    prefix = "";
    if(happyMod &gt;= 0){
        prefix = "+";
    }

    //Drawing the profile
    draw_text(xx + offset, yy , name + " (level " + string(level) + ")");
    draw_text(xx + offset, yy + yoffset,desc);
    
    //If xx, offset, yy, yoffset or any constants are changed then it also
    //needs to be changed in Step event.
    draw_text(xx + offset, yy+ (2*yoffset), "Capacity: " + string(capacity));
    draw_text(xx + offset, yy+(3*yoffset), "Orderlies: " + string(orderlies));
    draw_text(xx + offset, yy + (4*yoffset), "Happiness: " + prefix + string(happyMod));
    draw_text(xx + offset, yy + (5*yoffset), "Cost: " + prefix + string(moneyMod));
    
    //Only able to move and sell during night time
    if(!ctrl.isDay){    
        //Move button and text
        draw_sprite(spr_btn, 0, xx + offset, yy + (6 * yoffset));
        draw_text(xx + offset, yy + (6 * yoffset), "Move");
        //Sell button and text
        draw_sprite(spr_btn, 1, xx + string_width(desc) + offset - xsell_offset, yy + (6 * yoffset));
        draw_text(xx + string_width(desc) + offset - xsell_offset, yy + (6 * yoffset), "Sell");
        
        draw_rectangle(xx + offset - 1, yy - 1, xx + string_width(desc) + offset, yy + 7 * yoffset, true);
    }
    else{
        draw_rectangle(xx + offset - 1, yy - 1, xx + string_width(desc) + offset, yy + 6 * yoffset, true);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
